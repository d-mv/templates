module.exports = {
  root: true,
  env: { browser: true, es2022: true, node: true },
  extends: [
    'eslint:recommended',
    'plugin:react/recommended',
    'plugin:react/jsx-runtime',
    'plugin:react-hooks/recommended',
    'plugin:eslint-comments/recommended',
    'plugin:json/recommended',
    'plugin:markdown/recommended',
    'plugin:security/recommended',
    'plugin:jsdoc/recommended',
    'plugin:regexp/recommended',
     "plugin:css/recommended",
    'prettier',
    'plugin:prettier/recommended',
  ],
  ignorePatterns: ['dist', '.eslintrc.cjs',"react-app-env.d.ts"],
  parserOptions: { ecmaVersion: 'latest', sourceType: 'module' },
  settings: { react: { version: '18.2' } },
  plugins: ['react-refresh',"css",
    '@getify/proper-arrows',
    'eslint-comments',
    'prettier',
    'react',
    'promise',
    'jsdoc',
    'regexp',
    'testing-library',
    'html',
    '@stylistic'
  ],
  rules: {
    "react/prop-types": "off",
    "no-use-before-define": "error",
    "no-undef": "error",
    "no-await-in-loop": 'error',
    "no-duplicate-imports": "error",
    "no-unneeded-ternary": "error",
    'react-hooks/rules-of-hooks': 'error',
    'react-hooks/exhaustive-deps': 'warn',
    'jsdoc/require-jsdoc': 'off',
    'react/react-in-jsx-scope': 'off',
    // "testing-library/await-async-query": "error",
    // "testing-library/no-await-sync-query": "error",
    'testing-library/no-debugging-utils': 'warn',
    'testing-library/no-dom-import': 'off',
    'react/jsx-uses-react': 'error',
    'react/jsx-uses-vars': 'error',
    'promise/always-return': 'error',
    'promise/no-return-wrap': 'error',
    'promise/param-names': 'error',
    'promise/catch-or-return': 'error',
    'promise/no-native': 'off',
    'promise/no-nesting': 'warn',
    'promise/no-promise-in-callback': 'warn',
    'promise/no-callback-in-promise': 'warn',
    'promise/avoid-new': 'warn',
    'promise/no-new-statics': 'error',
    'promise/no-return-in-finally': 'warn',
    'promise/valid-params': 'warn',
    // 'node/exports-style': ['error', 'module.exports'],
    // 'node/file-extension-in-import': ['error', 'always'],
    // 'node/prefer-global/buffer': ['error', 'always'],
    // 'node/prefer-global/console': ['error', 'always'],
    // 'node/prefer-global/process': ['error', 'always'],
    // 'node/prefer-global/url-search-params': ['error', 'always'],
    // 'node/prefer-global/url': ['error', 'always'],
    // 'node/prefer-promises/dns': 'error',
    // 'node/prefer-promises/fs': 'error',
    complexity: ['error', 10],
    // 'ramda/always-simplification': 'error',
    // 'ramda/any-pass-simplification': 'error',
    // 'ramda/both-simplification': 'error',
    // 'ramda/complement-simplification': 'error',
    // 'ramda/compose-pipe-style': 'error',
    // 'ramda/compose-simplification': 'error',
    // 'ramda/cond-simplification': 'error',
    // 'ramda/either-simplification': 'error',
    // 'ramda/eq-by-simplification': 'error',
    // 'ramda/filter-simplification': 'error',
    // 'ramda/if-else-simplification': 'error',
    // 'ramda/map-simplification': 'error',
    // 'ramda/merge-simplification': 'error',
    // 'ramda/no-redundant-and': 'error',
    // 'ramda/no-redundant-not': 'error',
    // 'ramda/no-redundant-or': 'error',
    // 'ramda/pipe-simplification': 'error',
    // 'ramda/prefer-both-either': 'error',
    // 'ramda/prefer-complement': 'error',
    // 'ramda/prefer-ramda-boolean': 'error',
    // 'ramda/prop-satisfies-simplification': 'error',
    // 'ramda/reduce-simplification': 'error',
    // 'ramda/reject-simplification': 'error',
    // 'ramda/set-simplification': 'error',
    // 'ramda/unless-simplification': 'error',
    // 'ramda/when-simplification': 'error',
    // '@typescript-eslint/ban-ts-comment': [
    //   'error',
    //   {
    //     'ts-expect-error': 'allow-with-description',
    //     'ts-ignore': 'allow-with-description',
    //     'ts-nocheck': 'allow-with-description',
    //     'ts-check': 'allow-with-description',
    //     minimumDescriptionLength: 3,
    //   },
    // ],
    'no-constant-condition': 'error',
    'no-redeclare': 'error',
    '@getify/proper-arrows/params': [
      'error',
      {
        unused: 'none',
        trivial: false,
        count: 15,
        length: 0,
        allowed: ['key'],
      },
    ],
    'no-useless-catch': 'error',
    'no-self-compare': 'error',
    'no-useless-return': 'error',
    'no-const-assign': 'error',
    'no-useless-constructor': 'error',
    'no-param-reassign': 'error',
    '@stylistic/no-mixed-spaces-and-tabs': 'error',
    '@stylistic/keyword-spacing': 'error',
    // 'no-use-before-define': ['error', { functions: true, classes: true, variables: true }],
    // radix: 'error',
    'no-var': 'error',
    // 'no-unused-vars': 'off',
    'no-unused-vars': [
      'warn',
      {
        vars: 'all',
        args: 'after-used',
        ignoreRestSiblings: false,
        argsIgnorePattern: '^_',
      },
    ],
    // '@typescript-eslint/member-ordering': 'off',
    // '@typescript-eslint/no-explicit-any': ['error', { ignoreRestArgs: false }],
    // '@stylistic/quotes': ['error', 'single', { avoidEscape: true, allowTemplateLiterals: true }],
    '@stylistic/semi': ['off', null],
    // 'async-await/space-after-async': 2,
    // 'async-await/space-after-await': 2,
    '@stylistic/block-spacing': ['error', 'always'],
    '@stylistic/lines-around-comment': [0],
    '@stylistic/lines-between-class-members': ['error', 'always'],
    'max-lines': ['error', { max: 300, skipBlankLines: true, skipComments: true }],
    'max-nested-callbacks': ['error', 15],
    'max-params': ['error', 4],
    '@stylistic/newline-per-chained-call': ['off'],
    'no-console': ['error', { allow: ['warn', 'error'] }],
    '@stylistic/no-multi-spaces': ['error'],
    '@stylistic/no-multiple-empty-lines': ['error'],
    '@stylistic/func-call-spacing': ['error'],
    '@stylistic/no-whitespace-before-property': ['error'],
    'prettier/prettier': 'error',
    '@stylistic/space-before-blocks': ['error', 'always'],
    '@stylistic/spaced-comment': ['error', 'always', { markers: ['/'] }],
    '@stylistic/padding-line-between-statements': [
      'error',
      { blankLine: 'always', prev: 'const', next: '*' },
      { blankLine: 'always', prev: '*', next: 'const' },
      { blankLine: 'always', prev: 'function', next: '*' },
      { blankLine: 'always', prev: '*', next: 'function' },
      { blankLine: 'always', prev: 'if', next: '*' },
      { blankLine: 'always', prev: '*', next: 'if' },
      { blankLine: 'always', prev: 'for', next: '*' },
      { blankLine: 'always', prev: '*', next: 'for' },
      { blankLine: 'always', prev: 'switch', next: '*' },
      { blankLine: 'always', prev: '*', next: 'switch' },
      { blankLine: 'always', prev: 'try', next: '*' },
      { blankLine: 'always', prev: '*', next: 'try' },
      { blankLine: 'always', prev: 'export', next: '*' },
      { blankLine: 'always', prev: '*', next: 'export' },
    ],
    'eslint-comments/disable-enable-pair': [
      'error',
      {
        allowWholeFile: true,
      },
    ],
  },
}

